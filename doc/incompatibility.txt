BASIC interpreter incompatibility list
======================================

The interpreter is mostly based on the flavour of Microsoft BASIC described in the Commodore AmigaBASIC manual from 1985, but with a number of improvements and new features. Some AmigaBASIC features are not yet implemented, and there are also a number of other differences from AmigaBASIC and other Microsoft BASIC interpreters. This document attempts to list all the differences which may cause problems when running old programs.


Interpreter usage
-----------------

- You should define a BAS_MODULE_PATH environment variable with the path to the 'module' folder. See 'usage.txt' for more information about this.
- Program files must be in plain text 'ASCII' format. Tokenised binary formats used by AmigaBASIC and other interpreters aren't supported. You can save programs in this format using AmigaBASIC with the "A" parameter to the SAVE command.
- The interpreter must be run from the command line. See 'usage.txt' for a description of all the command line options.
- Immediate mode does not yet include many useful debugging functions, beyond being able to print and set the values of variables, and evaluate expressions.


Syntax
------

- Rules about when '()' are allowed after array names (in subprogram parameters etc.) are slightly different.
- Operators are not all left-associative: unary minus (-) and exponentiation (^) are right-associative.
- The '#' in front of file identifiers or at the end of I/O commands is not allowed.
- The DEF statement supports piecewise and recursive functions, and has a different syntax for this.
- Although traditional ':' is supported to allow more than one statement per line, '|' is also supported, and avoids ambiguity with ':' used to terminate an alphanumeric label.


Variable, label, subprogram, and function names
-----------------------------------------------

- All names are in the same namespace: e.g. a variable cannot have the same name as a label. Names within functions and subprograms are local, of course, so having the same label, parameter, or variable name in different subprograms/functions is OK.
- Type specifiers don't form part of a variable's name. E.g. this program will cause an error: x! = 5 | x$ = "Hello"
- Spaces aren't allowed between alphanumeric labels and the following ':', and between variable names and type specifiers.
- User-defined functions do not have to have names starting with 'FN'.


Data types and operators
------------------------

- Boolean (?) and character (@) types are supported.
- The logical operators AND, NOT, etc. operate on Boolean values. There are separate bitwise operators, BITAND, BITNOT, etc.
- TRUE is represented as 1 rather than -1 when it is converted to an integer.


Variables
---------

- Variables are not defined implicitly by being used in expressions. Only LET, CONST, FOR, DIM, and parameter passing can define variables.
- Maximum number of dimensions for an array is fixed at 4. Currently, this limit is defined in the interpreter at compile time.
- There's no implicit dimensioning of arrays - they must always be created with a DIM statement.
- DIM doesn't support dimensioning several arrays at once.


Subprograms
-----------

- Subprograms may be recursive.
- Subprograms may not be forward-referenced.
- Subprogram variables aren't STATIC by default. STATIC is an optional modifier for a subprogram, rather than required.
- Scalar subprogram parameters may be passed by value, rather than by reference.
- Type checking of subprogram parameters is stricter than in some BASICs, but looser than AmigaBASIC ...
- ... in particular, the number of array dimensions can't be specified.
- Whether (scalar) parameters are passed by value or reference is defined by the subprogram, rather than the caller - the 'CALL mysub((x))' convention to pass a temporary copy of x to a reference parameter isn't supported.


Event and error handling
------------------------

- ON <event> CALL <subprogram> is allowed as well as ON <event> GOTO <label> and ON <event> GOSUB <label>.
- RESUME NEXT is not supported.
- Error numbers for specific errors will differ from other BASICs. See errors.bas for all error codes. 


Input and output
----------------

- Graphics, windowing, and sound functions are only supported on the Amiga.
- Some statements for graphics and windowing aren't yet implemented. None of the OBJECT statements for animation are implemented.
- Game ports (STICK, STRIG), etc., aren't supported.
- FILES cannot be used to test the existence of a file - only to list a directory. It has more options though.
- A number of statements and functions to do with controlling printing output/options are not supported: LPRINT, TAB, POS, WIDTH, etc. Some of these are supported for output to a graphic window though (WPRINT, WTAB, etc.)
- FIELD syntax and semantics is different. Variables must be sized (using SPACE etc.) before being FIELDed.
- PRINT USING is not implemented.
- PRINT does not accept loose syntax with missing parameter separators. E.g. this program will cause a syntax error:
	x$ = "Hello"
	PRINT "The value is " x


Other differences in specific statements and functions
------------------------------------------------------

- There are a number of new statements, functions, and control-flow constructs: for example, SELECT and REPEAT.
- Some statements and functions are not (yet) implemented:
	- Several immediate-mode-only statements useful for debugging: LIST, STEP, NEW, DELETE, etc.
	- CALLing of machine code routines.
	- Statements for calling external library functions: LIBRARY, DECLARE FUNCTION, etc.
	- CHAIN and COMMON.
	- The statement form of MID, LET MID(s$, n, m) = t  - use the LETMID subprogram instead (see prelude.bas).
- Some statements and functions have differences in their parameters or how they work:
	- The single-line form of IF ... THEN ... [ELSE ...] does not handle nested IF statements very well if they have ELSE parts. You should rewrite such statements using the block IF syntax, which is much clearer anyway.
	- Also, in 'IF cond THEN stmt1 | stmt2', only stmt1 is part of the IF clause. stmt2 is treated as a following statement which will be executed regardless of whether the condition is true or not. If you want stmt2 to be treated as part of the IF statement, as it is by some interpreters, including AmigaBASIC, use block IF: 'IF cond THEN | stmt1 | stmt2 | ENDIF'.
	- CLEAR only allows the program's memory space (or 'data segment', in AmigaBASIC terminology) size to be increased, not decreased. If you specify a size smaller than the current size, it will be ignored. Use the --heap command line option to run the interpreter with a smaller, fixed amount of memory.
	- C<type> functions are 'traditional', working as documented for AmigaBASIC, and do not support free conversion from any scalar type, unlike more modern BASICs like Visual Basic.
	- SWAP requires both variables to exist.
	- TIMER only returns a whole number of seconds.
	- The STRING(code%, count%) form is not supported. Use STRING(CHR(code), count) instead.
