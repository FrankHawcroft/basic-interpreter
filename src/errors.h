/****** errors.h ******/

/* 	
	$VER: errors.h 0.16 (06.19.2011)
	
	BASIC interpreter error numbers.
*/

#ifndef BASIC_ERRORS_H_INCLUDED
#define BASIC_ERRORS_H_INCLUDED

typedef unsigned long Error;

/* Display an error message - */
extern void ReportError(Error, const char *file, int line, const char *stmt, char *supplementaryMsg);

/*	Error numbers encode:

	- Whether the error is a dead end or trappable error.
	- The module/subsystem/source file in this interpreter.
	- Whether it's an internal (debugging) error or a 'genuine' error.
	- 'Error objects' involved (encoded as offsets into the offending
	  line of code). Up to two objects can be included.
	  Offsets are stored one greater than the actual value, so that a value
	  of zero means no error object has been recorded.
*/

/* Specific error code mask (bits 0 - 7). */
#define ER_MASK_CODE 0xFF
#define ErrorCode(er) ((er) & ER_MASK_CODE)

/* Dead end/trappable indicator (bit 8). */
#define ER_BIT_DEAD_END (0 << 8)
#define ER_BIT_TRAPPABLE (1 << 8)
#define IsTrappableError(er) ((er & ER_BIT_TRAPPABLE) != 0)

/* Error module (bits 9 - 12). */
#define EncodeErrorModule(m) ((m) << 9)
#define ErrorModule(er) (((er) >> 9) & 0xF)

/* Internal or user error (bit 13). */
#define ER_BIT_INTERNAL (0 << 13)
#define ER_BIT_USER (1 << 13)
#define IsUserError(er) ((er & ER_BIT_USER) != 0)

/* Bits 14-15 are reserved. */

/* 'Error object' (bit 16-31): offset into offending line of code (+ 1) of symbol etc.
   Zero values mean no information has been stored.
   It's up to the error handler to determine the end of the offending object
   (or just print the column number). 
   NOTE: information cannot be stored for long line offsets (greater than 255)!
*/
#define EncodeErrorObj1(offset) ((((offset) + 1) & 0xFF) << 16)
#define EncodeErrorObj2(offset) ((((offset) + 1) & 0xFF) << 24)
#define ErrorObj1(er) (((er) >> 16) & 0xFF)
#define ErrorObj2(er) (((er) >> 24) & 0xFF)
#define HasErrorObj1(er) (ErrorObj1(er) != 0)
#define HasErrorObj2(er) (ErrorObj2(er) != 0)
#define ErrorObj1Offset(er) (ErrorObj1(er) - 1)
#define ErrorObj2Offset(er) (ErrorObj2(er) - 1)

/* At most 16 modules (codes 0 - 15) are allowed! */
#define ER_M_UNKNOWN 0 /* Unknown module. */
#define ER_M_IO 1 /* I/O support. */
#define ER_M_MAIN 2 /* Startup: command line parsing etc. */
#define ER_M_LEXER 3 /* Lexical analyser. */
#define ER_M_PARSER 4 /* Parsing (syntax). */
#define ER_M_SEMANTICS 5 /* Semantic analyser. */
#define ER_M_SYMTAB 6 /* Symbol table. */
#define ER_M_RUNTIME 7 /* General runtime trap (post semantic analysis). */
#define ER_M_HEAP 8 /* Heap. */
#define ER_M_EVENT 9 /* Event handling. */
#define ER_M_CONTROL 10 /* Control flow. */
#define ER_M_STACK 11 /* Stack (either expression evaluation or control flow). */
#define ER_M_USER 12 /* The ERROR statement. */

#define MakeBasicError(code, isTrappable, module, isUser) \
  (((code) & ER_MASK_CODE) \
   | ((isTrappable) ? ER_BIT_TRAPPABLE : ER_BIT_DEAD_END) \
   | EncodeErrorModule(module) \
   | ((isUser) ? ER_BIT_USER : ER_BIT_INTERNAL))

#define MakeTrappableError(code, module) MakeBasicError(code, TRUE, module, TRUE)
#define MakeDeadEndError(code, module) MakeBasicError(code, FALSE, module, TRUE)
#define MakeInternalError(code, module) MakeBasicError(code, FALSE, module, FALSE)

#define MAX_ERROR_OFFSET 255

/* Mask error objects into an error code. */
#define OneObjError(error, offset) ((error) | EncodeErrorObj1(offset))
#define TwoObjError(error, offset1, offset2)	\
  (OneObjError(error, offset1) | EncodeErrorObj2(offset2))

/* Include an error object if it makes sense relative to the start of the statement - */
extern Error PositionError(Error baseError, const char *stmtStart, const char *obj);

/* ---- Beginning of error code definitions generated by errors.bas on 05-07-2021 at 14:20:23 ---- */
#define FILEBADOP MakeTrappableError(1, ER_M_IO)
#define FILELOCKED MakeTrappableError(2, ER_M_IO)
#define FILENONEXISTENT MakeTrappableError(3, ER_M_IO)
#define FILEPROTECTED MakeTrappableError(4, ER_M_IO)
#define FILEDEVICE MakeTrappableError(5, ER_M_IO)
#define READPASTEOF MakeTrappableError(6, ER_M_IO)
#define BADFILESIZE MakeTrappableError(7, ER_M_IO)
#define RECNUMTOOBIG MakeTrappableError(8, ER_M_IO)
#define INPUTFORMAT MakeTrappableError(9, ER_M_IO)
#define ER_F_MORE_FILES MakeTrappableError(10, ER_M_IO)
#define OUTSIDEDOMAIN MakeTrappableError(11, ER_M_RUNTIME)
#define BADDIMENSION MakeTrappableError(12, ER_M_RUNTIME)
#define NOMEMORY MakeTrappableError(13, ER_M_HEAP)
#define OVERFLOWERR MakeTrappableError(14, ER_M_RUNTIME)
#define BADSUBSTRING MakeTrappableError(15, ER_M_RUNTIME)
#define NULLSTRING MakeTrappableError(16, ER_M_RUNTIME)
#define ZERODIVISOR MakeTrappableError(17, ER_M_RUNTIME)
#define BADEXPONENT MakeTrappableError(18, ER_M_RUNTIME)
#define BADSUBSCRIPT MakeTrappableError(19, ER_M_RUNTIME)
#define BADFILENUMBER MakeTrappableError(20, ER_M_IO)
#define BADBUFFERSIZE MakeTrappableError(21, ER_M_IO)
#define FILENUMBERINUSE MakeTrappableError(22, ER_M_IO)
#define BADFILEMODE MakeTrappableError(23, ER_M_IO)
#define BADFIELD MakeTrappableError(24, ER_M_IO)
#define ER_OUT_OF_DATA MakeTrappableError(25, ER_M_RUNTIME)
#define ER_BAD_SCREEN_ID MakeTrappableError(26, ER_M_RUNTIME)
#define ER_SCREEN_HAS_WINDOW MakeTrappableError(27, ER_M_RUNTIME)
#define ER_SCREEN MakeTrappableError(28, ER_M_RUNTIME)
#define ER_BAD_WINDOW_ID MakeTrappableError(29, ER_M_RUNTIME)
#define ER_BAD_SIZE MakeTrappableError(30, ER_M_RUNTIME)
#define ER_WINDOW MakeTrappableError(31, ER_M_RUNTIME)
#define ER_NO_OUTPUT_WINDOW MakeTrappableError(32, ER_M_RUNTIME)
#define ER_AREA MakeTrappableError(33, ER_M_RUNTIME)
#define ER_UNSAFE MakeTrappableError(34, ER_M_RUNTIME)
#define ER_AUDIO_OPEN_FAILED MakeTrappableError(35, ER_M_IO)
#define ER_AUDIO_CHANNEL_DENIED MakeTrappableError(36, ER_M_IO)
#define ER_AUDIO_NO_SAMPLE_MEMORY MakeTrappableError(37, ER_M_IO)
#define ER_AUDIO_BAD_PARAMETER MakeTrappableError(38, ER_M_IO)
#define ER_BAD_MENU_NAME MakeTrappableError(39, ER_M_RUNTIME)
#define ER_NO_MENU MakeTrappableError(40, ER_M_RUNTIME)
#define SUCCESS MakeInternalError(100, ER_M_UNKNOWN)
#define BADCOMMANDLINEARGS MakeDeadEndError(101, ER_M_MAIN)
#define CANTOPENCODEFILE MakeDeadEndError(102, ER_M_MAIN)
#define CANTOPENPROFILE MakeDeadEndError(103, ER_M_MAIN)
#define NOTIMPLEMENTED MakeDeadEndError(104, ER_M_RUNTIME)
#define BADCONSTANT MakeDeadEndError(105, ER_M_LEXER)
#define BADNAMEORTYPE MakeDeadEndError(106, ER_M_LEXER)
#define LONGLINE MakeDeadEndError(107, ER_M_LEXER)
#define REDEFINE MakeDeadEndError(108, ER_M_SYMTAB)
#define UNDEFINEDSUB MakeDeadEndError(109, ER_M_CONTROL)
#define UNDEFINEDLABEL MakeDeadEndError(110, ER_M_CONTROL)
#define UNDEFINEDVARORFUNC MakeDeadEndError(111, ER_M_SYMTAB)
#define MISMATCHEDPARENS MakeDeadEndError(112, ER_M_PARSER)
#define BADSYNTAX MakeDeadEndError(113, ER_M_PARSER)
#define BADARGCOUNT MakeDeadEndError(114, ER_M_SEMANTICS)
#define BADARGTYPE MakeDeadEndError(115, ER_M_SEMANTICS)
#define DIMENSIONMISMATCH MakeDeadEndError(116, ER_M_SEMANTICS)
#define REDIMENSION MakeDeadEndError(117, ER_M_RUNTIME)
#define MODIFYCONST MakeDeadEndError(118, ER_M_SEMANTICS)
#define SCALAREXPECTED MakeDeadEndError(119, ER_M_SEMANTICS)
#define ARRAYEXPECTED MakeDeadEndError(120, ER_M_SEMANTICS)
#define BADHANDLER MakeDeadEndError(121, ER_M_EVENT)
#define SUBWITHOUTENDSUB MakeDeadEndError(122, ER_M_CONTROL)
#define ENDSUBWITHOUTSUB MakeDeadEndError(123, ER_M_CONTROL)
#define NESTEDSUBS MakeDeadEndError(124, ER_M_CONTROL)
#define SHAREDOUTSIDESUB MakeDeadEndError(125, ER_M_CONTROL)
#define LOCALOUTSIDESUB MakeDeadEndError(126, ER_M_CONTROL)
#define IFWITHOUTENDIF MakeDeadEndError(127, ER_M_CONTROL)
#define ELSEIFWITHOUTIF MakeDeadEndError(128, ER_M_CONTROL)
#define ENDIFWITHOUTIF MakeDeadEndError(129, ER_M_CONTROL)
#define WHILEWITHOUTWEND MakeDeadEndError(130, ER_M_CONTROL)
#define WENDWITHOUTWHILE MakeDeadEndError(131, ER_M_CONTROL)
#define FORWITHOUTNEXT MakeDeadEndError(132, ER_M_CONTROL)
#define NEXTWITHOUTFOR MakeDeadEndError(133, ER_M_CONTROL)
#define REPEATWITHOUTUNTIL MakeDeadEndError(134, ER_M_CONTROL)
#define UNTILWITHOUTREPEAT MakeDeadEndError(135, ER_M_CONTROL)
#define SELECTWITHOUTENDSELECT MakeDeadEndError(136, ER_M_CONTROL)
#define CASEOUTSIDESELECT MakeDeadEndError(137, ER_M_CONTROL)
#define OTHERWISENOTLASTCLAUSE MakeDeadEndError(138, ER_M_CONTROL)
#define TWOOTHERWISECLAUSES MakeDeadEndError(139, ER_M_CONTROL)
#define ENDSELECTWITHOUTSELECT MakeDeadEndError(140, ER_M_CONTROL)
#define RETURNWITHOUTGOSUB MakeDeadEndError(141, ER_M_CONTROL)
#define RESUMEOUTSIDEHANDLER MakeDeadEndError(142, ER_M_EVENT)
#define RESUMEINTOHANDLER MakeDeadEndError(143, ER_M_EVENT)
#define EXECUTIONABORTED MakeDeadEndError(144, ER_M_EVENT)
#define PROGRAMBUFFERFULL MakeDeadEndError(145, ER_M_MAIN)
#define BADRETURNTYPE MakeDeadEndError(146, ER_M_SEMANTICS)
#define ER_NOT_BOOL MakeDeadEndError(147, ER_M_SEMANTICS)
#define FORGETINHANDLER MakeDeadEndError(148, ER_M_EVENT)
#define ER_MODULE_PATH_LONG MakeDeadEndError(149, ER_M_RUNTIME)
#define ER_STACK_OVERFLOW MakeDeadEndError(150, ER_M_STACK)
#define ER_STACK_UNDERFLOW MakeDeadEndError(151, ER_M_STACK)
#define ER_UNKNOWN_EVENT_TYPE MakeDeadEndError(152, ER_M_EVENT)
#define ER_EXPECTED_VARIABLE MakeDeadEndError(153, ER_M_SEMANTICS)
#define ER_HALTED MakeDeadEndError(154, ER_M_RUNTIME)
#define ER_TOO_MANY_SYNTAX_ERRORS MakeDeadEndError(155, ER_M_MAIN)
#define ER_PARAMETER_NOT_OPTIONAL MakeDeadEndError(156, ER_M_SEMANTICS)
#define ER_BAD_NEXT_VARIABLE MakeDeadEndError(157, ER_M_SEMANTICS)
#define ER_ERASE_IN_SUB MakeDeadEndError(158, ER_M_SEMANTICS)
#define ER_TOO_MANY_INSTANCES MakeDeadEndError(159, ER_M_MAIN)
#define INTERNALEVENT MakeInternalError(200, ER_M_RUNTIME)
#define ER_INTERNAL MakeInternalError(254, ER_M_RUNTIME)
#define ER_UNDEFINED MakeInternalError(255, ER_M_UNKNOWN)
/* ---- End of error code definitions generated by errors.bas on 05-07-2021 at 14:20:23 ---- */

#endif /* BASIC_ERRORS_H_INCLUDED */
